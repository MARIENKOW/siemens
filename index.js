// import express from "express";
// import cors from "cors";
// import * as dotenv from "dotenv";
// import cookieParser from "cookie-parser";
// import http from "http";

// dotenv.config();

// const PORT = process.env.PORT;

// const app = express();
// app.use(express.json());
// app.use(express.urlencoded({ extended: true }));
// app.use(cookieParser());
// app.use(
//     cors({
//         credentials: true,
//         origin: process.env.CLIENT_URL,
//     })
// );

// const web = http.Server(app);

// // process.on("warning", (warning) => {
// //     if (warning.name === "DeprecationWarning") {
// //         console.log("Deprecation warning stack:", warning.stack);
// //     }
// // });

// try {
//     web.listen(PORT, process.env.SERVER_URL, () =>
//         console.log("Server is working")
//     );
// } catch (e) {
//     console.log(`${e.message}`);
// }

import { SerialPort } from "serialport";
import { ReadlineParser } from "@serialport/parser-readline";

const port = new SerialPort({
    path: "COM3", // —Å–≤–æ–π –ø–æ—Ä—Ç
    baudRate: 9600,
    dataBits: 8,
    stopBits: 1,
    parity: "none",
});
const parser = port.pipe(new ReadlineParser({ delimiter: "\r\n" }));

const CODES = {
    ENQ: String.fromCharCode(5),
    ACK: String.fromCharCode(6),
    NAK: String.fromCharCode(21),
    EOT: String.fromCharCode(4),
    STX: String.fromCharCode(2),
    ETX: String.fromCharCode(3),
    CR: String.fromCharCode(13),
    LF: String.fromCharCode(10),
};

//!-----------------------------------------------------------------------------
// function calcChecksum(frameOrCore) {
//     const STX = "\x02";
//     const ETX = "\x03";

//     // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–ª–Ω—ã–π —Ñ—Ä–µ–π–º —Å STX/ETX ‚Äî –≤–æ–∑—å–º—ë–º –º–µ–∂–¥—É –Ω–∏–º–∏ (–≤–∫–ª—é—á–∞—è ETX)
//     const stx = frameOrCore.indexOf(STX);
//     const etx = frameOrCore.indexOf(ETX);
//     let core;
//     if (stx !== -1 && etx !== -1 && etx > stx) {
//         core = frameOrCore.slice(stx + 1, etx + 1); // <-- –≤–∫–ª—é—á–∞–µ—Ç ETX
//     } else {
//         // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ core (frameNum + body + CR) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ETX –≤—Ä—É—á–Ω—É—é
//         core = frameOrCore + ETX;
//     }

//     let sum = 0;
//     for (let i = 0; i < core.length; i++) sum += core.charCodeAt(i);
//     sum &= 0xff;
//     return sum.toString(16).toUpperCase().padStart(2, "0");
// }
//!-----------------------------------------------------------------------------

function calcChecksum(frame) {
    let sum = 0;
    for (let i = 0; i < frame.length; i++) {
        sum += frame.charCodeAt(i);
    }
    console.log(sum);
    const cs = (sum % 256).toString(16).toUpperCase().padStart(2, "0");
    return cs;
}

function makeFrame(frameNum, body) {
    const core = `${frameNum}${body}${CODES.CR}${CODES.ETX}`;
    const cs = calcChecksum(core);
    return `${CODES.STX}${core}${cs}${CODES.CR}${CODES.LF}`;
}

// ====== –ü—Ä–∏—ë–º –≤—Ö–æ–¥—è—â–∏—Ö ======
parser.on("data", (data) => {
    console.log("–ü—Ä–∏—à–ª–æ:", JSON.stringify(data));

    if (data.includes(CODES.ENQ)) {
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ACK");
        port.write(CODES.ACK);
    }

    if (data.includes("|Q|")) {
        console.log("–ü–æ–ª—É—á–µ–Ω Query:", data);
        // —Ç—É—Ç –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å sendOrders() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }

    if (data.includes("|R|")) {
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", data);
    }

    if (data.includes(CODES.EOT)) {
        console.log("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }
});

port.on("open", () => console.log("COM –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤."));
port.on("error", (err) => console.error("–û—à–∏–±–∫–∞:", err.message));

function sendOrders(accession, tests = []) {
    const frames = [];
    let f = 1;
    const frameCount = (atr) => {
        if (atr) return f;
        if (f >= 7) {
            f = 0;
            return f;
        }
        return ++f;
    };

    frames.push(makeFrame(frameCount(true), `H|\\^&||||||||||T||`)); // Header
    frames.push(makeFrame(frameCount(), `P|1|${accession}`)); // Patient
    tests.forEach((t, i) => {
        frames.push(
            makeFrame(
                frameCount(),
                `O|${i + 1}|${accession}||^^^${t}|||||||||||1||||||||||`
            )
        );
    });
    frames.push(makeFrame(frameCount(), `L|1|N`)); // Terminator

    console.log("–ì–æ—Ç–æ–≤–∏–º –∑–∞–∫–∞–∑ –¥–ª—è", accession, tests);
    console.log(frames);

    let current = -1; // –∫–∞–∫–æ–π –∫–∞–¥—Ä

    // === —Å–ª—É—à–∞–µ–º ACK –æ—Ç –ø—Ä–∏–±–æ—Ä–∞ ===
    const ackHandler = (data) => {
        if (data.includes(CODES.ACK)) {
            console.log("üì• ACK –ø–æ–ª—É—á–µ–Ω");

            current++;
            if (current < frames.length) {
                const frame = frames[current];
                console.log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä:", frame);
                port.write(frame);
            } else {
                console.log("‚û°Ô∏è –í—Å–µ –∫–∞–¥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —à–ª—ë–º EOT");
                port.write(CODES.EOT);
                parser.off("data", ackHandler);
            }
        }
    };

    parser.on("data", ackHandler);

    port.write(CODES.ENQ);
    console.log("‚û°Ô∏è ENQ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥—ë–º ACK");
}

// setTimeout(() => {
//     sendOrders("1000101", ["NA", "K", "CL", "ALB", "BUN", "CA"]);
// }, 1000);

// setTimeout(() => {
//     sendOrders("1000101", ["TSH", "LH", "FSH", "DGX", "T4", "HCG",'TU','RTH','T3','FER','PSA','PAP']);
// }, 1000);

//  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã ASTM/IMMULITE –ø—Ä–æ—Ç–æ–∫–æ–ª–∞

// –£—Ä–æ–≤–µ–Ω—å –ø–æ—Ä—Ç–∞ (—Ñ–∏–∑–∏–∫–∞ RS-232)
// 9600 baud
// 8 data bits
// 1 stop bit
// no parity
// null-modem –∫–∞–±–µ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫—Ä–µ—â—ë–Ω–Ω—ã–π).

// –ë–∞–∑–æ–≤—ã–π —Ö—ç–Ω–¥—à–µ–π–∫
// LIS —à–ª—ë—Ç ENQ.
// IMMULITE –æ—Ç–≤–µ—á–∞–µ—Ç ACK.
// LIS –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–¥—Ä (STX ‚Ä¶ ETX + checksum + CRLF).
// IMMULITE –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç ACK –∏–ª–∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç NAK.
// –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞ LIS —à–ª—ë—Ç EOT.
// –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Block Transfer.

// Checksum (BCC)
// –ü–æ—Å–ª–µ ETX –∏–¥—ë—Ç –¥–≤—É—Ö—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∫–æ–¥ (hex), —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–æ –≤—Å–µ–º –±–∞–π—Ç–∞–º –æ—Ç STX –¥–æ ETX.
// –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ–¥—É–ª—å 256 –æ—Ç —Å—É–º–º—ã –±–∞–π—Ç–æ–≤.

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
// H (Header) ‚Äî –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏.
// P (Patient) ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ID.
// O (Order) ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤.
// L (Terminator) ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
// –ò–Ω–æ–≥–¥–∞ R (Result) –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç IMMULITE –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

// –ö–∞–¥—Ä–æ–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
// –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º (–ø–æ—Å–ª–µ STX) –∏–¥—ë—Ç –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞ (1‚Äì7, –ø–æ—Ç–æ–º –ø–æ –∫—Ä—É–≥—É).

//  –ú–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
// –û–±—Ä–∞–±–æ—Ç–∫–∞ NAK
// –ï—Å–ª–∏ IMMULITE –æ—Ç–≤–µ—á–∞–µ—Ç NAK, LIS –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä.
// –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
// –ï—Å–ª–∏ –ø–æ—Å–ª–µ ENQ –∏–ª–∏ –∫–∞–¥—Ä–∞ ACK/NAK –Ω–µ –ø—Ä–∏—à—ë–ª –∑–∞ X —Å–µ–∫—É–Ω–¥ (–æ–±—ã—á–Ω–æ 15 —Å–µ–∫), –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
// –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ.
// –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç IMMULITE
// IMMULITE –º–æ–∂–µ—Ç —Å–∞–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (R|...) –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
// –ù—É–∂–Ω–æ —É–º–µ—Ç—å –ø–∞—Ä—Å–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∫–∞–¥—Ä—ã (—Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ STX/ETX –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å checksum).
// –ü–∞–∫–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–µ
// –û–¥–∏–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑ –∏–Ω–æ–≥–¥–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤).
// –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω—É–∂–Ω–æ —Å–∫–ª–µ–∏–≤–∞—Ç—å –±–ª–æ–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ L|....
// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
// –ü–æ—Å–ª–µ EOT IMMULITE –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.
// –ù—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ —Å–ª—É—à–∞—Ç—å.

//  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
// –°–¥–µ–ª–∞—Ç—å State Machine:
// IDLE ‚Üí SEND_ENQ ‚Üí WAIT_ACK ‚Üí SEND_FRAME ‚Üí WAIT_ACK ‚Üí ‚Ä¶ ‚Üí SEND_EOT ‚Üí DONE.
// –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É NAK: –µ—Å–ª–∏ NAK, –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—Ç –∂–µ –∫–∞–¥—Ä –¥–æ 3 —Ä–∞–∑.
// –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —Å–µ–∫—É–Ω–¥).
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
// –≤—ã–¥–µ–ª—è—Ç—å –∫–∞–¥—Ä—ã –ø–æ STX/ETX,
// –ø—Ä–æ–≤–µ—Ä—è—Ç—å checksum,
// —Å–∫–ª–µ–∏–≤–∞—Ç—å H/P/O/L –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ R –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
// –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –≤ ¬´—Å—ã—Ä–æ–º¬ª –≤–∏–¥–µ (hex + ASCII) –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.



// [Record Type (H)] [Delimiter Def.] [Message Control
// ID] [Password] [Sending systems company name]
// [Sending Systems address] [Reserved] [Senders
// Phone#] [Communication parameters] [Receiver ID]
// [Comments/special instructions] [Processing ID]
// [Version#] [Message Date + Time]
// <STX>[FrameNumber]H|\^&||Password|Siemens|Randolph^ 
// New^Jersey^07869||(201)927-
// 2828|8N1|YourSystem||P|1|19940323082858
// <CR><ETX>[CheckSum]<CR><LF></LF>  

// RECEIVER ID - IMMULITE

// "Sender ID - LIS"




// [Record Type (P)][Sequence #][Practice Assigned
// Patient ID][Laboratory Assigned Patient ID][Patient
// ID][Patient Name][Mother's Maiden
// Name][BirthDate][Patient Sex][Patient Race][Patient
// Address][Reserved][Patient Phone #][Attending
// Physician ID][Special Field 1][Special Field
// 2][Patient Height][Patient Weight][Patients Known
// or Suspected Diagnosis] [Patient active
// medications][Patients Diet][Practice Field
// #1][Practice Field #2][Admission and Discharge
// Dates][Admission Status][Location][Nature of
// Alternative Diagnostic Code and
// Classification][Alternative Diagnostic Code and
// Classification][Patient Religion][Marital
// Status][Isolation Status][Language][Hospital
// Service][Hospital Institution][Dosage Category]
// <STX>[FrameNumber]P|1|101|||Riker^Al||19611102|F|||
// ||Bashere<CR><ETX>[CheckSum]<CR><LF></LF>


// [Record Type (O)][Sequence#][Specimen ID
// (Accession#)][Instrument Specimen ID][Universal
// Test ID][Priority][Order Date/Time][Collection
// Date/Time][Collection End Time][Collection
// Volume][Collector ID][Action Code][Danger
// Code][Relevant Clinical Info][Date/Time Specimen
// Received][Specimen Descriptor,Specimen
// Type,Specimen Source][Ordering
// Physician][Physician's Telephone Number][User Field
// No.1][User Field No.2][Lab Field No.1][Lab Field
// No.2][Date/Time results reported or last
// modified][Instrument Charge to Computer
// System][Instrument Section ID][Report
// Types][Reserved Field][Location or ward of Specimen
// Collection][Nosocomial Infection Flag][Specimen
// Service][Specimen Institution]
// <STX>[FrameNumber]O|1|1550623||^^^LH|R|199310110912
// 33|19931011091233<CR><ETX>[CheckSum]<CR><LF></LF>





// [Record Type (R)][Sequence #][Universal Test
// ID][Data (result)][Units][ReferenceRanges] [Result
// abnormal flags][Nature of Abnormality
// Testing][Result Status][Date of change in
// instruments normal values or units][Operator
// ID][Date\Time Test Started][Date\Time Test
// Completed][Instrument ID]
// 6DPSOH5HVXOW0HVVDJH
// <STX>[FrameNumber]R|1|^^^LH|8.2|mIU/
// mL|.7\.7^400\400|N|N|F||test|19931011091233|1993101
// 1091233|Siemens<CR><ETX>[CheckSum]<CR><LF>



// [Record Type (H)] [Delimiter Def.] [Message Control ID]
// [Password] [Sending systems company name] [Sending Systems
// address] [Reserved] [Senders Phone#] [Communication
// parameters] [Receiver ID] [Comments/special instructions]
// [Processing ID] [Version#] [Message Date + Time]
// 1H|\^&||PASSWORD|DPC||Flanders^New^Jersey^07836||973-927-
// 2828|N81|Your System||P|1|19940407120613<CR><ETX>[51
// Checksum] <CR><LF>

// <ENQ>
// Header
// Patient 1
// Order 1
// Order 2
// Order 3
// Terminator
// <EOT>

// [Record Type (P)][Sequence #][Practice Assigned Patient
// ID][Laboratory Assigned Patient ID][Patient ID][Patient
// Name][Mother's Maiden Name][BirthDate][Patient
// Sex][Patient Race][Patient Address][Reserved][Patient
// Phone #][Attending Physician ID][Special Field
// 1][Special Field 2][Patient Height][Patient
// Weight][Patients Known or Suspected Diagnosis] [Patient
// active medications][Patients Diet][Practice Field
// #1][Practice Field #2][Admission and Discharge
// Dates][Admission Status][Location][Nature of
// Alternative Diagnostic Code and
// Classification][Alternative Diagnostic Code and
// Classification][Patient Religion][Marital
// Status][Isolation Status][Language][Hospital
// Service][Hospital Institution][Dosage Category]
// 2P|1|101|||Riker^Al||19611102|F|||||Bashere<CR><ETX>[2ACheck
// Sum] <CR><LF>

// [Record Type (O)][Sequence#][Specimen ID
// (Accession#)][Instrument Specimen ID][Universal Test
// ID][Priority][Order Date/Time][Collection Date/
// Time][Collection End Time][Collection
// Volume][Collector ID][Action Code][Danger
// Code][Relevant Clinical Info][Date/Time Specimen
// Received][Specimen Descriptor,Specimen Type,Specimen
// Source][Ordering Physician][Physician's Telephone
// Number][User Field No.1][User Field No.2][Lab Field
// No.1][Lab Field No.2][Date/Time results reported or
// last modified][Instrument Charge to Computer
// System][Instrument Section ID][Report Types][Reserved
// Field][Location or ward of Specimen
// Collection][Nosocomial Infection Flag][Specimen
// Service][Specimen Institution]
// 3O|1|1550623||^^^LH|R|19931011091233|19931011091233
// <CR><ETX>[6C Checksum] <CR><LF>

// [Record Type (R)][Sequence #][Universal Test ID][Data
// (result)][Units][ReferenceRanges] [Result abnormal
// flags][Nature of Abnormality Testing][Result
// Status][Date of change in instruments normal values or
// units][Operator ID][Date\Time Test Started][Date\Time
// Test Completed][Instrument ID]
// 4R|1|^^^LH|8.2|mIU/
// mL|.7\.7^400\400|N|N|F||test|19931011091233|1993101109
// 1233|DPC<CR><ETX>[8FCheckSum] <CR><LF></LF>